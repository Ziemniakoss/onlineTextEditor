/// Editor server and messages generated by server(like connected itp)
use actix::prelude::*;
use rand::{self, rngs::ThreadRng, Rng};
use std::collections::{HashMap, HashSet};
use crate::editor_session;
use crate::editor_session::FileCreationRequest;

#[derive(Message)]
#[rtype(result = "()")]
pub struct Message(pub String);

#[derive(Message)]
#[rtype(usize)]
pub struct Connect {
	pub addr: Recipient<Message>,
	pub project_id:i32
}


#[derive(Message)]
#[rtype(result = "()")]
pub struct Disconnect {
	pub id: usize,
}

#[derive(Message)]
#[rtype(result = "()")]
pub struct ClientMessage {
	/// Id of the client session
	pub id: usize,
	/// Peer message
	pub msg: String,
	pub project_id: i32,
}

/// Join room, if room does not exists create new one.
#[derive(Message)]
#[rtype(result = "()")]
pub struct Join {
	pub id: usize,
	pub project_id: i32,
}

pub struct EditorServer {
	sessions: HashMap<usize, Recipient<Message>>,
	rooms: HashMap<i32, HashSet<usize>>,
	rng: ThreadRng,
}

impl Default for EditorServer {
	fn default() -> EditorServer {
		// default room
		let mut rooms = HashMap::new();
		rooms.insert(0, HashSet::new());

		EditorServer {
			sessions: HashMap::new(),
			rooms,
			rng: rand::thread_rng(),
		}
	}
}

impl EditorServer {
	/// Send message to all users editing given project expet user with session id equal to skip_id
	fn send_message(&self, project_id: i32, message: &str, skip_id: usize) {
		if let Some(sessions) = self.rooms.get(&project_id) {
			for id in sessions {
				if *id != skip_id {
					if let Some(addr) = self.sessions.get(id) {
						let _ = addr.do_send(Message(message.to_owned()));
					}
				}
			}
		}
	}
}
impl Actor for EditorServer {
	type Context = Context<Self>;
}

/// Register new session and assign unique id to this session
impl Handler<editor_session::Connect> for EditorServer {
	type Result = usize;

	fn handle(&mut self, msg: editor_session::Connect, _: &mut Context<Self>) -> Self::Result {
		println!("Someone joined");

		// notify all users in same room
		self.send_message(msg.project_id, "Someone joined", 0);

		// register session with random id
		let id = self.rng.gen::<usize>();
		self.sessions.insert(id, msg.addr.recipient());

		// auto join session to Main room
		self.rooms
			.entry(msg.project_id)
			.or_insert_with(HashSet::new)
			.insert(id);
		id
	}
}

/// Handler for Disconnect message.
impl Handler<editor_session::Disconnect> for EditorServer {
	type Result = ();

	fn handle(&mut self, msg: editor_session::Disconnect, _: &mut Context<Self>) {
		println!("Someone disconnected");

		let mut rooms: Vec<i32> = Vec::new();

		// remove address
		if self.sessions.remove(&msg.session_id).is_some() {
			// remove session from all rooms
			for (name, sessions) in &mut self.rooms {
				if sessions.remove(&msg.session_id) {
					rooms.push(name.to_owned());
				}
			}
		}
		// send message to other users
		for room in rooms {
			self.send_message(room, "Someone disconnected", 0);
		}
	}
}

impl Handler<editor_session::FileCreationRequest> for EditorServer{
	type Result = ();

	fn handle(&mut self, msg: FileCreationRequest, ctx: &mut Context<Self>) -> Self::Result {

	}
}

impl Handler<ClientMessage> for EditorServer {
	type Result = ();

	fn handle(&mut self, msg: ClientMessage, _: &mut Context<Self>) {
		self.send_message(msg.project_id, msg.msg.as_str(), msg.id);
	}
}

impl Handler<Join> for EditorServer {
	type Result = ();

	fn handle(&mut self, msg: Join, _: &mut Context<Self>) {
		println!("Joined to {}" ,msg.project_id);

		let Join { id, project_id: name } = msg;
		let mut rooms = Vec::new();

		// remove session from all rooms
		for (n, sessions) in &mut self.rooms {
			if sessions.remove(&id) {
				rooms.push(n.to_owned());
			}
		}
		// send message to other users
		for room in rooms {
			self.send_message(room, "Someone disconnected", 0);
		}

		self.rooms
			.entry(name.clone())
			.or_insert_with(HashSet::new)
			.insert(id);

		self.send_message(name, "Someone connected", id);
	}
}